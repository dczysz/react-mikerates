{"version":3,"sources":["containers/RatePane/RatePane.module.css","components/Input/Input.module.css","containers/VolumePane/VolumePane.module.css","containers/Totals/Totals.module.css","components/Target/Target.module.css","components/Input/Input.js","containers/Totals/Totals.js","containers/VolumePane/VolumePane.js","containers/RatePane/RatePane.js","components/Target/Target.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RatePane","heading","Input","label","inputField","success","danger","ok","inputGroup","Totals","Target","state","focused","handleFocus","event","_this","setState","_this2","this","value","props","val","showDecimals","Number","toFixed","react_default","a","createElement","className","classes","join","type","onChange","changed","readOnly","disabled","onFocus","onBlur","Component","totals","secPerPartTarget","secPerPartClassesArr","secPerPart","push","secPerPartClasses","components_Input_Input","partsPerHour","partsPerMin","VolumePane","pcsYear","pcsWeek","pcsDay","numShifts","hrsShift","pcsYearChangedHandler","e","stateChangeObj","target","updateTotals","updatePcsYear","pcsWeekChangedHandler","pcsDayChangedHandler","numShiftsChangedHandler","hrsShiftChangedHandler","newStateChangeObj","newState","Object","objectSpread","updateSecPerPartTarget","ratePaneClasses","numOf","cycleTime","numOfChangedHandler","cycleTimeChangedHandler","pageName","numOfLabel","num","parts","toString","split","replace","addCommas","App","panes","name","volume","winding","molding","secPerPartTargetChangedHandler","newTargetVal","newSecPerPartState","newPcsYearVal","ratePanes","map","pane","index","key","containers_RatePane_RatePane","lib_default","swipeOptions","continuous","ref","el","containers_VolumePane_VolumePane","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d640638d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"RatePane\":\"RatePane_RatePane__1qK1w\",\"heading\":\"RatePane_heading__2ke-n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1f4mV\",\"label\":\"Input_label__2GIs7\",\"inputField\":\"Input_inputField__3OnUv\",\"success\":\"Input_success__2z7E-\",\"danger\":\"Input_danger__13z7s\",\"ok\":\"Input_ok__14mkh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputGroup\":\"VolumePane_inputGroup__1wlN_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Totals\":\"Totals_Totals__3tEXU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Target\":\"Target_Target__2FOLG\"};","import React, { Component } from 'react';\r\n\r\nimport classes from './Input.module.css';\r\n\r\nclass Input extends Component {\r\n\r\n  state = {\r\n    focused: false,\r\n  }\r\n\r\n  handleFocus = (event, focused) => {\r\n    this.setState({ focused: focused });\r\n    if (focused) {\r\n      //TODO: select text\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // Dont add decimals to integer inputs\r\n    let value = this.props.val;\r\n\r\n    if (value === 0 || value === '') {\r\n      value = '';\r\n    } else if (this.props.showDecimals) {\r\n      value = Number(this.props.val);\r\n      // Only set toFixed if not focused\r\n      if (!this.state.focused) {\r\n        value = value.toFixed(2);\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className={classes.Input}>\r\n        <label className={classes.label}>{this.props.label}</label>\r\n        <input\r\n          className={[classes.inputField, classes[this.props.classes]].join(' ')}\r\n          type=\"number\"\r\n          value={value}\r\n          onChange={this.props.changed}\r\n          readOnly={this.props.readOnly}\r\n          disabled={this.props.disabled}\r\n          onFocus={(event) => this.handleFocus(event, true)}\r\n          onBlur={(event) => this.handleFocus(event, false)}\r\n        ></input>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n \r\nexport default Input;","import React from 'react';\r\n\r\nimport Input from '../../components/Input/Input';\r\nimport classes from './Totals.module.css';\r\n\r\nconst totals = (props) => {\r\n  const secPerPartTarget = props.secPerPartTarget;\r\n  const secPerPartClassesArr = [];\r\n\r\n  if (props.secPerPart !== '') {\r\n    if (props.secPerPart < secPerPartTarget) \r\n      secPerPartClassesArr.push('success');\r\n    else if (props.secPerPart > secPerPartTarget) \r\n      secPerPartClassesArr.push('danger');\r\n    else\r\n      secPerPartClassesArr.push('ok');\r\n  }\r\n  const secPerPartClasses = secPerPartClassesArr.join(' ');\r\n\r\n    // Condidtionally apply style to secPerPart input depending on target\r\n    return (\r\n      <div className={classes.Totals}>\r\n        <Input\r\n          label=\"PP/Hour\"\r\n          val={props.partsPerHour}\r\n          readOnly\r\n          disabled\r\n          showDecimals\r\n        />\r\n        <Input\r\n          label=\"PP/Min\"\r\n          val={props.partsPerMin}\r\n          readOnly\r\n          disabled\r\n          showDecimals\r\n        />\r\n        <Input\r\n          classes={secPerPartClasses}\r\n          label=\"(s) per part\"\r\n          val={props.secPerPart}\r\n          readOnly\r\n          disabled\r\n          showDecimals\r\n        />\r\n      </div>\r\n    );\r\n\r\n}\r\n \r\nexport default totals;","import React, { Component } from 'react';\r\n\r\nimport ratePaneClasses from '../RatePane/RatePane.module.css';\r\nimport classes from './VolumePane.module.css';\r\nimport Input from '../../components/Input/Input';\r\nimport Totals from '../Totals/Totals';\r\n\r\nclass VolumePane extends Component {\r\n  state = {\r\n    pcsYear: '',\r\n    pcsWeek: '',\r\n    pcsDay: '',\r\n    numShifts: '',\r\n    hrsShift: 7.5,\r\n    partsPerHour: '',\r\n    partsPerMin: '',\r\n    secPerPart: '',\r\n  }\r\n\r\n  //TODO: Make modular, use array and get indexes to make correct calcs?\r\n  pcsYearChangedHandler = (e) => {\r\n    const stateChangeObj = {\r\n      pcsYear: e.target.value,\r\n      pcsWeek: e.target.value / 50,\r\n      pcsDay: e.target.value / 50 / 5,\r\n    }\r\n    this.updateTotals(stateChangeObj);\r\n\r\n    // Update pcsYear in App state for Totals reference\r\n    this.props.updatePcsYear(e.target.value);\r\n  }\r\n\r\n  pcsWeekChangedHandler = (e) => {\r\n    const stateChangeObj = {\r\n      pcsYear: e.target.value * 50,\r\n      pcsWeek: e.target.value,\r\n      pcsDay: e.target.value / 5,\r\n    }\r\n    this.updateTotals(stateChangeObj);\r\n\r\n    // Update pcsYear in App state for Totals reference\r\n    this.props.updatePcsYear(stateChangeObj.pcsYear);\r\n  }\r\n\r\n  pcsDayChangedHandler = (e) => {\r\n    const stateChangeObj = {\r\n      pcsYear: e.target.value * 50 * 5,\r\n      pcsWeek: e.target.value * 5,\r\n      pcsDay: e.target.value,\r\n    }\r\n    this.updateTotals(stateChangeObj);\r\n\r\n    // Update pcsYear in App state for Totals reference\r\n    this.props.updatePcsYear(stateChangeObj.pcsYear);\r\n  }\r\n\r\n  numShiftsChangedHandler = (e) => {\r\n    this.updateTotals({ numShifts: e.target.value });\r\n  }\r\n\r\n  hrsShiftChangedHandler = (e) => {\r\n    this.updateTotals({ hrsShift: e.target.value });\r\n  }\r\n\r\n  updateTotals = (newStateChangeObj) => {\r\n    const newState = {...this.state, ...newStateChangeObj};\r\n\r\n    // Check if all required input fields are filled in\r\n    if (newState.pcsYear !== 0   && newState.pcsYear !== '' &&\r\n        newState.pcsWeek !== 0   && newState.pcsWeek !== '' &&\r\n        newState.pcsDay !== 0    && newState.pcsDay !== '' &&\r\n        newState.numShifts !== 0 && newState.numShifts !== '' &&\r\n        newState.hrsShift !== 0  && newState.hrsShift !== '') {\r\n          \r\n          // Calculate totals\r\n          newState.partsPerHour = newState.pcsDay / \r\n            (newState.numShifts * newState.hrsShift);\r\n          newState.partsPerMin = newState.partsPerHour / 60;\r\n          newState.secPerPart = 60 / newState.partsPerMin;\r\n    }\r\n\r\n    // Update state\r\n    this.setState(newState);\r\n\r\n    // Update secPerPart target in App.js state\r\n    this.props.updateSecPerPartTarget(newState.secPerPart);\r\n  }\r\n\r\n\r\n  render() { \r\n    return (\r\n      <div>\r\n        <h1 className={ratePaneClasses.heading}>Volume</h1>\r\n        <div className={classes.inputGroup}>\r\n          <Input\r\n            label=\"Pcs. Year\"\r\n            changed={this.pcsYearChangedHandler}\r\n            val={this.state.pcsYear}\r\n          />\r\n          <Input\r\n            label=\"Week (50)\"\r\n            changed={this.pcsWeekChangedHandler}\r\n            val={this.state.pcsWeek}\r\n            showDecimals\r\n          />\r\n          <Input\r\n            label=\"Day (5)\"\r\n            changed={this.pcsDayChangedHandler}\r\n            val={this.state.pcsDay}\r\n            showDecimals\r\n          />\r\n        </div>\r\n        <div className={classes.inputGroup}>\r\n          <Input\r\n            label=\"# Shifts\"\r\n            changed={this.numShiftsChangedHandler}\r\n            val={this.state.numShifts}\r\n          />\r\n          <Input\r\n            label=\"Hrs. Shift\"\r\n            changed={this.hrsShiftChangedHandler}\r\n            val={this.state.hrsShift}\r\n          />\r\n        </div>\r\n        <Totals\r\n          partsPerHour={this.state.partsPerHour}\r\n          partsPerMin={this.state.partsPerMin}\r\n          secPerPart={this.state.secPerPart}\r\n          secPerPartTarget={this.props.secPerPartTarget}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default VolumePane;","import React, { Component } from 'react';\r\n\r\nimport classes from './RatePane.module.css';\r\nimport Input from '../../components/Input/Input';\r\nimport Totals from '../Totals/Totals';\r\n\r\nclass RatePane extends Component {\r\n  state = {\r\n    numOf: '',\r\n    cycleTime: '',\r\n    partsPerHour: '',\r\n    partsPerMin: '',\r\n    secPerPart: '',\r\n  }\r\n\r\n  numOfChangedHandler = (e) => {\r\n    this.updateTotals({ numOf: Number(e.target.value) });\r\n  }\r\n\r\n  cycleTimeChangedHandler = (e) => {\r\n    this.updateTotals({ cycleTime: Number(e.target.value) });\r\n  }\r\n\r\n  updateTotals = (newStateChangeObj) => {\r\n    // Copy state and overwrite changed val with newStateChangeObj\r\n    const newState = {...this.state, ...newStateChangeObj};\r\n\r\n    // Calculate totals\r\n    if (newState.numOf !== 0 && newState.numOf !== '' &&\r\n      newState.cycleTime !== 0 && newState.cycleTime !== '') {\r\n      \r\n        newState.secPerPart = newState.cycleTime / newState.numOf;\r\n        newState.partsPerMin = 60 / newState.secPerPart;\r\n        newState.partsPerHour = 60 * newState.partsPerMin;\r\n    }\r\n\r\n    // Update state\r\n    this.setState(newState);\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className={classes.RatePane}>\r\n        <div>\r\n          <h1 className={classes.heading}>{this.props.pageName}</h1>\r\n          <Input\r\n            label={'# ' + this.props.numOfLabel}\r\n            changed={this.numOfChangedHandler}\r\n            val={this.state.numOf}\r\n          />\r\n          <Input\r\n            label=\"Cycle Time (s)\"\r\n            changed={this.cycleTimeChangedHandler}\r\n            val={this.state.cycleTime}\r\n          />\r\n        </div>\r\n        \r\n        <Totals\r\n          partsPerHour={this.state.partsPerHour}\r\n          partsPerMin={this.state.partsPerMin}\r\n          secPerPart={this.state.secPerPart}\r\n          secPerPartTarget={this.props.secPerPartTarget}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default RatePane;","import React from 'react';\r\n\r\nimport classes from './Target.module.css';\r\n\r\nconst target = (props) => {\r\n\r\n  // Thank you Elias Zamaria: https://stackoverflow.com/a/2901298\r\n  const addCommas = (num) => {\r\n    var parts = num.toString().split(\".\");\r\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    return parts.join(\".\");\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Target}>\r\n      <p>Pcs. Year: <strong>{props.pcsYear === null ? '?' : addCommas(props.pcsYear)}</strong></p>\r\n      <p>(s) Per Part: <strong>{Number(props.target) === 0 ? '?' : Number(props.target).toFixed(2)}</strong></p>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default target;","import React, { Component } from 'react';\nimport ReactSwipe from 'react-swipe';\n\nimport './App.css';\nimport VolumePane from './containers/VolumePane/VolumePane';\nimport RatePane from './containers/RatePane/RatePane';\nimport Target from './components/Target/Target';\n\nclass App extends Component {\n  state = {\n    panes: [\n      {\n        name: 'winding',\n        numOfLabel: 'heads',\n      },\n      {\n        name: 'molding',\n        numOfLabel: 'cavities',\n      },\n    ],\n    secPerPart: {\n      volume: null,\n      winding: null,\n      molding: null,\n    },\n    pcsYear: null,\n  }\n\n  secPerPartTargetChangedHandler = (newTargetVal) => {\n    const newSecPerPartState = {...this.state.secPerPart};\n    newSecPerPartState.volume = newTargetVal;\n\n    this.setState({ secPerPart: newSecPerPartState });\n  }\n\n  pcsYearChangedHandler = (newPcsYearVal) => {\n    this.setState({ pcsYear: newPcsYearVal });\n  }\n\n  render() {\n    let reactSwipeEl; //! ReactSwipe must have divs as children, then components\n\n    const ratePanes = this.state.panes.map((pane, index) => {\n      return (\n        <div \n          className=\"swipeDiv\"\n          key={pane.name + index}>\n          <RatePane\n            pageName={pane.name}\n            numOfLabel={pane.numOfLabel}\n            secPerPartTarget={this.state.secPerPart[pane.name]}\n          />\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"App\">\n        <Target\n          pcsYear={this.state.pcsYear}\n          target={this.state.secPerPart.volume}\n        />\n\n        <ReactSwipe\n          swipeOptions={{ continuous: false }}\n          ref={el => (reactSwipeEl = el)}\n        >\n          <div className=\"swipeDiv\">\n            <VolumePane\n              secPerPartTarget={this.state.secPerPart.volume}\n              updateSecPerPartTarget={(newTargetVal) => this.secPerPartTargetChangedHandler(newTargetVal)}\n              updatePcsYear={(newPcsYearVal) => this.pcsYearChangedHandler(newPcsYearVal)} />\n          </div>\n\n          {ratePanes}\n\n        </ReactSwipe>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}