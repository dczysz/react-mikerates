{"version":3,"sources":["containers/RatePane/RatePane.module.css","components/Input/Input.module.css","containers/VolumePane/VolumePane.module.css","containers/Totals/Totals.module.css","components/Target/Target.module.css","components/Input/Input.js","containers/Totals/Totals.js","containers/RatePane/RatePane.js","containers/VolumePane/VolumePane.js","components/Target/Target.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RatePane","heading","Input","label","inputField","success","danger","ok","inputGroup","Totals","Target","input","props","value","val","showDecimals","Number","toFixed","react_default","a","createElement","className","classes","join","type","onChange","changed","readOnly","disabled","totals","secPerPartTarget","secPerPartClassesArr","secPerPart","push","secPerPartClasses","partsPerHour","partsPerMin","state","numOf","cycleTime","numOfChangedHandler","e","_this","updateTotals","target","cycleTimeChangedHandler","newStateChangeObj","newState","Object","objectSpread","setState","this","pageName","numOfLabel","Component","VolumePane","pcsYear","pcsWeek","pcsDay","numShifts","hrsShift","pcsYearChangedHandler","stateChangeObj","updatePcsYear","pcsWeekChangedHandler","pcsDayChangedHandler","numShiftsChangedHandler","hrsShiftChangedHandler","updateSecPerPartTarget","ratePaneClasses","App","panes","name","volume","winding","molding","secPerPartTargetChangedHandler","newTargetVal","newSecPerPartState","newPcsYearVal","_this2","lib_default","swipeOptions","continuous","ref","el","containers_VolumePane_VolumePane","containers_RatePane_RatePane","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d266409.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"RatePane\":\"RatePane_RatePane__1qK1w\",\"heading\":\"RatePane_heading__2ke-n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1f4mV\",\"label\":\"Input_label__2GIs7\",\"inputField\":\"Input_inputField__3OnUv\",\"success\":\"Input_success__2z7E-\",\"danger\":\"Input_danger__13z7s\",\"ok\":\"Input_ok__14mkh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputGroup\":\"VolumePane_inputGroup__1wlN_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Totals\":\"Totals_Totals__3tEXU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Target\":\"Target_Target__2FOLG\"};","import React from 'react';\r\n\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n\r\n  // TODO: Make this better, wonky in different ways on ff/chrome\r\n  // Dont add decimals to integer inputs\r\n  let value = props.val;\r\n\r\n  if (value === 0 || value === '') {\r\n    value = '';\r\n  } else if (props.showDecimals) {\r\n    value = Number(props.val).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.label}>{props.label}</label>\r\n      <input\r\n        className={[classes.inputField, classes[props.classes]].join(' ')}\r\n        type=\"number\"\r\n        value={value}\r\n        onChange={props.changed}\r\n        readOnly={props.readOnly}\r\n        disabled={props.disabled}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n \r\nexport default input;","import React from 'react';\r\n\r\nimport Input from '../../components/Input/Input';\r\nimport classes from './Totals.module.css';\r\n\r\nconst totals = (props) => {\r\n  const secPerPartTarget = props.secPerPartTarget;\r\n  const secPerPartClassesArr = [];\r\n\r\n  if (props.secPerPart !== '') {\r\n    if (props.secPerPart < secPerPartTarget) \r\n      secPerPartClassesArr.push('success');\r\n    else if (props.secPerPart > secPerPartTarget) \r\n      secPerPartClassesArr.push('danger');\r\n    else\r\n      secPerPartClassesArr.push('ok');\r\n  }\r\n  const secPerPartClasses = secPerPartClassesArr.join(' ');\r\n\r\n    // Condidtionally apply style to secPerPart input depending on target\r\n    return (\r\n      <div className={classes.Totals}>\r\n        <Input\r\n          label=\"PP/Hour\"\r\n          val={props.partsPerHour}\r\n          readOnly\r\n          disabled\r\n          showDecimals\r\n        />\r\n        <Input\r\n          label=\"PP/Min\"\r\n          val={props.partsPerMin}\r\n          readOnly\r\n          disabled\r\n          showDecimals\r\n        />\r\n        <Input\r\n          classes={secPerPartClasses}\r\n          label=\"(s) per part\"\r\n          val={props.secPerPart}\r\n          readOnly\r\n          disabled\r\n          showDecimals\r\n        />\r\n      </div>\r\n    );\r\n\r\n}\r\n \r\nexport default totals;","import React, { Component } from 'react';\r\n\r\nimport classes from './RatePane.module.css';\r\nimport Input from '../../components/Input/Input';\r\nimport Totals from '../Totals/Totals';\r\n\r\nclass RatePane extends Component {\r\n  state = {\r\n    numOf: '',\r\n    cycleTime: '',\r\n    partsPerHour: '',\r\n    partsPerMin: '',\r\n    secPerPart: '',\r\n  }\r\n\r\n  numOfChangedHandler = (e) => {\r\n    this.updateTotals({ numOf: Number(e.target.value) });\r\n  }\r\n\r\n  cycleTimeChangedHandler = (e) => {\r\n    this.updateTotals({ cycleTime: Number(e.target.value) });\r\n  }\r\n\r\n  updateTotals = (newStateChangeObj) => {\r\n    // Copy state and overwrite changed val with newStateChangeObj\r\n    const newState = {...this.state, ...newStateChangeObj};\r\n\r\n    // Calculate totals\r\n    if (newState.numOf !== 0 && newState.numOf !== '' &&\r\n      newState.cycleTime !== 0 && newState.cycleTime !== '') {\r\n      \r\n        newState.secPerPart = newState.cycleTime / newState.numOf;\r\n        newState.partsPerMin = 60 / newState.secPerPart;\r\n        newState.partsPerHour = 60 * newState.partsPerMin;\r\n    }\r\n\r\n    // Update state\r\n    this.setState(newState);\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className={classes.RatePane}>\r\n        <div>\r\n          <h1 className={classes.heading}>{this.props.pageName}</h1>\r\n          <Input\r\n            label={'# ' + this.props.numOfLabel}\r\n            changed={this.numOfChangedHandler}\r\n            val={this.state.numOf}\r\n          />\r\n          <Input\r\n            label=\"Cycle Time (s)\"\r\n            changed={this.cycleTimeChangedHandler}\r\n            val={this.state.cycleTime}\r\n          />\r\n        </div>\r\n        \r\n        <Totals\r\n          partsPerHour={this.state.partsPerHour}\r\n          partsPerMin={this.state.partsPerMin}\r\n          secPerPart={this.state.secPerPart}\r\n          secPerPartTarget={this.props.secPerPartTarget}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default RatePane;","import React, { Component } from 'react';\r\n\r\nimport ratePaneClasses from '../RatePane/RatePane.module.css';\r\nimport classes from './VolumePane.module.css';\r\nimport Input from '../../components/Input/Input';\r\nimport Totals from '../Totals/Totals';\r\n\r\nclass VolumePane extends Component {\r\n  state = {\r\n    pcsYear: '',\r\n    pcsWeek: '',\r\n    pcsDay: '',\r\n    numShifts: '',\r\n    hrsShift: 7.5,\r\n    partsPerHour: '',\r\n    partsPerMin: '',\r\n    secPerPart: '',\r\n  }\r\n\r\n  //TODO: Make modular, use array and get indexes to make correct calcs?\r\n  pcsYearChangedHandler = (e) => {\r\n    const stateChangeObj = {\r\n      pcsYear: e.target.value,\r\n      pcsWeek: e.target.value / 50,\r\n      pcsDay: e.target.value / 50 / 5,\r\n    }\r\n    this.updateTotals(stateChangeObj);\r\n\r\n    // Update pcsYear in App state for Totals reference\r\n    this.props.updatePcsYear(e.target.value);\r\n  }\r\n\r\n  pcsWeekChangedHandler = (e) => {\r\n    const stateChangeObj = {\r\n      pcsYear: e.target.value * 50,\r\n      pcsWeek: e.target.value,\r\n      pcsDay: e.target.value / 5,\r\n    }\r\n    this.updateTotals(stateChangeObj);\r\n  }\r\n\r\n  pcsDayChangedHandler = (e) => {\r\n    const stateChangeObj = {\r\n      pcsYear: e.target.value * 50 * 5,\r\n      pcsWeek: e.target.value * 5,\r\n      pcsDay: e.target.value,\r\n    }\r\n    this.updateTotals(stateChangeObj);\r\n  }\r\n\r\n  numShiftsChangedHandler = (e) => {\r\n    this.updateTotals({ numShifts: e.target.value });\r\n  }\r\n\r\n  hrsShiftChangedHandler = (e) => {\r\n    this.updateTotals({ hrsShift: e.target.value });\r\n  }\r\n\r\n  updateTotals = (newStateChangeObj) => {\r\n    const newState = {...this.state, ...newStateChangeObj};\r\n\r\n    // Check if all required input fields are filled in\r\n    if (newState.pcsYear !== 0   && newState.pcsYear !== '' &&\r\n        newState.pcsWeek !== 0   && newState.pcsWeek !== '' &&\r\n        newState.pcsDay !== 0    && newState.pcsDay !== '' &&\r\n        newState.numShifts !== 0 && newState.numShifts !== '' &&\r\n        newState.hrsShift !== 0  && newState.hrsShift !== '') {\r\n          \r\n          // Calculate totals\r\n          newState.partsPerHour = newState.pcsDay / \r\n            (newState.numShifts * newState.hrsShift);\r\n          newState.partsPerMin = newState.partsPerHour / 60;\r\n          newState.secPerPart = 60 / newState.partsPerMin;\r\n    }\r\n\r\n    // Update state\r\n    this.setState(newState);\r\n\r\n    // Update secPerPart target in App.js state\r\n    this.props.updateSecPerPartTarget(newState.secPerPart);\r\n  }\r\n\r\n\r\n  render() { \r\n    return (\r\n      <div>\r\n        <h1 className={ratePaneClasses.heading}>Volume</h1>\r\n        <div className={classes.inputGroup}>\r\n          <Input\r\n            label=\"Pcs. Year\"\r\n            changed={this.pcsYearChangedHandler}\r\n            val={this.state.pcsYear}\r\n          />\r\n          <Input\r\n            label=\"Week (50)\"\r\n            changed={this.pcsWeekChangedHandler}\r\n            val={this.state.pcsWeek}\r\n            showDecimals\r\n          />\r\n          <Input\r\n            label=\"Day (5)\"\r\n            changed={this.pcsDayChangedHandler}\r\n            val={this.state.pcsDay}\r\n            showDecimals\r\n          />\r\n        </div>\r\n        <div className={classes.inputGroup}>\r\n          <Input\r\n            label=\"# Shifts\"\r\n            changed={this.numShiftsChangedHandler}\r\n            val={this.state.numShifts}\r\n          />\r\n          <Input\r\n            label=\"Hrs. Shift\"\r\n            changed={this.hrsShiftChangedHandler}\r\n            val={this.state.hrsShift}\r\n          />\r\n        </div>\r\n        <Totals\r\n          partsPerHour={this.state.partsPerHour}\r\n          partsPerMin={this.state.partsPerMin}\r\n          secPerPart={this.state.secPerPart}\r\n          secPerPartTarget={this.props.secPerPartTarget}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default VolumePane;","import React from 'react';\r\n\r\nimport classes from './Target.module.css';\r\n\r\nconst target = (props) => {\r\n  return (\r\n    <div className={classes.Target}>\r\n      <p>Pcs. Year: {props.pcsYear}</p>\r\n      <p>(s) Per Part: {Number(props.target) === 0 ? '?' : Number(props.target).toFixed(2)}</p>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default target;","import React, { Component } from 'react';\nimport ReactSwipe from 'react-swipe';\n\nimport './App.css';\nimport RatePane from './containers/RatePane/RatePane';\nimport VolumePane from './containers/VolumePane/VolumePane';\nimport Target from './components/Target/Target';\n\nclass App extends Component {\n  state = {\n    panes: [\n      {\n        name: 'winding',\n        numOfLabel: 'heads',\n      },\n      {\n        name: 'molding',\n        numOfLabel: 'cavities',\n      },\n    ],\n    secPerPart: {\n      volume: null,\n      winding: null,\n      molding: null,\n    },\n    pcsYear: null,\n  }\n\n  secPerPartTargetChangedHandler = (newTargetVal) => {\n    const newSecPerPartState = {...this.state.secPerPart};\n    newSecPerPartState.volume = newTargetVal;\n\n    this.setState({ secPerPart: newSecPerPartState });\n  }\n\n  pcsYearChangedHandler = (newPcsYearVal) => {\n    this.setState({ pcsYear: newPcsYearVal });\n  }\n\n  render() {\n    let reactSwipeEl;\n    //! ReactSwipe must have divs as children, then components\n    return (\n      <div className=\"App\">\n        <ReactSwipe\n          swipeOptions={{ continuous: false }}\n          ref={el => (reactSwipeEl = el)}\n        >\n          <div className=\"swipeDiv\">\n            <VolumePane\n              secPerPartTarget={this.state.secPerPart.volume}\n              updateSecPerPartTarget={(newTargetVal) => this.secPerPartTargetChangedHandler(newTargetVal)}\n              updatePcsYear={(newPcsYearVal) => this.pcsYearChangedHandler(newPcsYearVal)} />\n          </div>\n\n          <div className=\"swipeDiv\">\n            <RatePane\n              pageName={this.state.panes[0].name}\n              numOfLabel={this.state.panes[0].numOfLabel}\n              secPerPartTarget={this.state.secPerPart.volume}\n            />\n          </div>\n\n          <div className=\"swipeDiv\">\n            <RatePane\n              pageName={this.state.panes[1].name}\n              numOfLabel={this.state.panes[1].numOfLabel}\n              secPerPartTarget={this.state.secPerPart.volume}\n            />\n          </div>\n        </ReactSwipe>\n        \n        <Target\n          pcsYear={this.state.pcsYear}\n          target={this.state.secPerPart.volume}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}